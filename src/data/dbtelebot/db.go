// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0

package dbtelebot

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.deleteAnswersOfClientStmt, err = db.PrepareContext(ctx, deleteAnswersOfClient); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAnswersOfClient: %w", err)
	}
	if q.getClientByTelegramUserIdStmt, err = db.PrepareContext(ctx, getClientByTelegramUserId); err != nil {
		return nil, fmt.Errorf("error preparing query GetClientByTelegramUserId: %w", err)
	}
	if q.getClientScoreStmt, err = db.PrepareContext(ctx, getClientScore); err != nil {
		return nil, fmt.Errorf("error preparing query GetClientScore: %w", err)
	}
	if q.getOneRandomNotAnsweredQuestionStmt, err = db.PrepareContext(ctx, getOneRandomNotAnsweredQuestion); err != nil {
		return nil, fmt.Errorf("error preparing query GetOneRandomNotAnsweredQuestion: %w", err)
	}
	if q.getOptionByQuestionIdAndTextStmt, err = db.PrepareContext(ctx, getOptionByQuestionIdAndText); err != nil {
		return nil, fmt.Errorf("error preparing query GetOptionByQuestionIdAndText: %w", err)
	}
	if q.getOptionsByQuestionIdStmt, err = db.PrepareContext(ctx, getOptionsByQuestionId); err != nil {
		return nil, fmt.Errorf("error preparing query GetOptionsByQuestionId: %w", err)
	}
	if q.getQuestionByIdStmt, err = db.PrepareContext(ctx, getQuestionById); err != nil {
		return nil, fmt.Errorf("error preparing query GetQuestionById: %w", err)
	}
	if q.getReferencesByQuestionIdStmt, err = db.PrepareContext(ctx, getReferencesByQuestionId); err != nil {
		return nil, fmt.Errorf("error preparing query GetReferencesByQuestionId: %w", err)
	}
	if q.getTheLastQuestionAnsweredByClientStmt, err = db.PrepareContext(ctx, getTheLastQuestionAnsweredByClient); err != nil {
		return nil, fmt.Errorf("error preparing query GetTheLastQuestionAnsweredByClient: %w", err)
	}
	if q.insertClientStmt, err = db.PrepareContext(ctx, insertClient); err != nil {
		return nil, fmt.Errorf("error preparing query InsertClient: %w", err)
	}
	if q.insertClientHasQuestionsStmt, err = db.PrepareContext(ctx, insertClientHasQuestions); err != nil {
		return nil, fmt.Errorf("error preparing query InsertClientHasQuestions: %w", err)
	}
	if q.setClientWaitingForAnswerStmt, err = db.PrepareContext(ctx, setClientWaitingForAnswer); err != nil {
		return nil, fmt.Errorf("error preparing query SetClientWaitingForAnswer: %w", err)
	}
	if q.setClientWaitingForAnswerToFalseStmt, err = db.PrepareContext(ctx, setClientWaitingForAnswerToFalse); err != nil {
		return nil, fmt.Errorf("error preparing query SetClientWaitingForAnswerToFalse: %w", err)
	}
	if q.setClientWaitingForAnswerToTrueAndQuestionIdStmt, err = db.PrepareContext(ctx, setClientWaitingForAnswerToTrueAndQuestionId); err != nil {
		return nil, fmt.Errorf("error preparing query SetClientWaitingForAnswerToTrueAndQuestionId: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.deleteAnswersOfClientStmt != nil {
		if cerr := q.deleteAnswersOfClientStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAnswersOfClientStmt: %w", cerr)
		}
	}
	if q.getClientByTelegramUserIdStmt != nil {
		if cerr := q.getClientByTelegramUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getClientByTelegramUserIdStmt: %w", cerr)
		}
	}
	if q.getClientScoreStmt != nil {
		if cerr := q.getClientScoreStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getClientScoreStmt: %w", cerr)
		}
	}
	if q.getOneRandomNotAnsweredQuestionStmt != nil {
		if cerr := q.getOneRandomNotAnsweredQuestionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOneRandomNotAnsweredQuestionStmt: %w", cerr)
		}
	}
	if q.getOptionByQuestionIdAndTextStmt != nil {
		if cerr := q.getOptionByQuestionIdAndTextStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOptionByQuestionIdAndTextStmt: %w", cerr)
		}
	}
	if q.getOptionsByQuestionIdStmt != nil {
		if cerr := q.getOptionsByQuestionIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOptionsByQuestionIdStmt: %w", cerr)
		}
	}
	if q.getQuestionByIdStmt != nil {
		if cerr := q.getQuestionByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getQuestionByIdStmt: %w", cerr)
		}
	}
	if q.getReferencesByQuestionIdStmt != nil {
		if cerr := q.getReferencesByQuestionIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getReferencesByQuestionIdStmt: %w", cerr)
		}
	}
	if q.getTheLastQuestionAnsweredByClientStmt != nil {
		if cerr := q.getTheLastQuestionAnsweredByClientStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTheLastQuestionAnsweredByClientStmt: %w", cerr)
		}
	}
	if q.insertClientStmt != nil {
		if cerr := q.insertClientStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertClientStmt: %w", cerr)
		}
	}
	if q.insertClientHasQuestionsStmt != nil {
		if cerr := q.insertClientHasQuestionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertClientHasQuestionsStmt: %w", cerr)
		}
	}
	if q.setClientWaitingForAnswerStmt != nil {
		if cerr := q.setClientWaitingForAnswerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setClientWaitingForAnswerStmt: %w", cerr)
		}
	}
	if q.setClientWaitingForAnswerToFalseStmt != nil {
		if cerr := q.setClientWaitingForAnswerToFalseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setClientWaitingForAnswerToFalseStmt: %w", cerr)
		}
	}
	if q.setClientWaitingForAnswerToTrueAndQuestionIdStmt != nil {
		if cerr := q.setClientWaitingForAnswerToTrueAndQuestionIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setClientWaitingForAnswerToTrueAndQuestionIdStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                               DBTX
	tx                                               *sql.Tx
	deleteAnswersOfClientStmt                        *sql.Stmt
	getClientByTelegramUserIdStmt                    *sql.Stmt
	getClientScoreStmt                               *sql.Stmt
	getOneRandomNotAnsweredQuestionStmt              *sql.Stmt
	getOptionByQuestionIdAndTextStmt                 *sql.Stmt
	getOptionsByQuestionIdStmt                       *sql.Stmt
	getQuestionByIdStmt                              *sql.Stmt
	getReferencesByQuestionIdStmt                    *sql.Stmt
	getTheLastQuestionAnsweredByClientStmt           *sql.Stmt
	insertClientStmt                                 *sql.Stmt
	insertClientHasQuestionsStmt                     *sql.Stmt
	setClientWaitingForAnswerStmt                    *sql.Stmt
	setClientWaitingForAnswerToFalseStmt             *sql.Stmt
	setClientWaitingForAnswerToTrueAndQuestionIdStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                     tx,
		tx:                                     tx,
		deleteAnswersOfClientStmt:              q.deleteAnswersOfClientStmt,
		getClientByTelegramUserIdStmt:          q.getClientByTelegramUserIdStmt,
		getClientScoreStmt:                     q.getClientScoreStmt,
		getOneRandomNotAnsweredQuestionStmt:    q.getOneRandomNotAnsweredQuestionStmt,
		getOptionByQuestionIdAndTextStmt:       q.getOptionByQuestionIdAndTextStmt,
		getOptionsByQuestionIdStmt:             q.getOptionsByQuestionIdStmt,
		getQuestionByIdStmt:                    q.getQuestionByIdStmt,
		getReferencesByQuestionIdStmt:          q.getReferencesByQuestionIdStmt,
		getTheLastQuestionAnsweredByClientStmt: q.getTheLastQuestionAnsweredByClientStmt,
		insertClientStmt:                       q.insertClientStmt,
		insertClientHasQuestionsStmt:           q.insertClientHasQuestionsStmt,
		setClientWaitingForAnswerStmt:          q.setClientWaitingForAnswerStmt,
		setClientWaitingForAnswerToFalseStmt:   q.setClientWaitingForAnswerToFalseStmt,
		setClientWaitingForAnswerToTrueAndQuestionIdStmt: q.setClientWaitingForAnswerToTrueAndQuestionIdStmt,
	}
}
